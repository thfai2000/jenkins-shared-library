def checkoutEnvConfig() {
    checkout([$class: 'GitSCM',
                branches: [[name: env.BRANCH_NAME]],
                doGenerateSubmoduleConfigurations: false,
                extensions: [],
                submoduleCfg: [],
                userRemoteConfigs: [[url: ENV_CONFIG_GIT_SOURCE]]])
    script {
        env.envNamesString = sh(script: "ls ansible/inventory/* | xargs -n 1 basename ", returnStdout: true).trim()
    }
}

def checkoutAppSource() {
    checkout([$class: 'GitSCM',
                branches: [[name: env.BRANCH_NAME]],
                doGenerateSubmoduleConfigurations: false,
                extensions: [],
                submoduleCfg: [],
                userRemoteConfigs: [[url: APP_GIT_SOURCE]]])
}

def checkoutAnsibleSource() {
    checkout([$class: 'GitSCM',
                branches: [[name: env.BRANCH_NAME]],
                doGenerateSubmoduleConfigurations: false,
                extensions: [],
                submoduleCfg: [],
                userRemoteConfigs: [[url: ANSIBLE_GIT_SOURCE]]])
}

def selectEnv(closure){
    echo "GIT_BRANCH: ${env.BRANCH_NAME}"
    // echo "VERSION_SNAPSHOT_REPO_NAME: $VERSION_SNAPSHOT_REPO_NAME"
    dir('env-config') {
        checkoutEnvConfig()
    }
    dir('app-source') {
        checkoutAppSource()
    }
    dir('ansible-source'){
        checkoutAnsibleSource()
    }


    def envNames = env.envNamesString.split("\n")
    echo "type: ${envNames.getClass()}"
    echo "envNames: ${envNames}"
    
    def params = input(message: 'Provide the deployment information',
        ok: "Continue",
        parameters: [
            choice(name: 'which_env', choices: Arrays.asList(envNames), description: 'Select the environment')
        ]
    )
    if(closure){
        closure()
    }
    echo "params=${params}"
    env.which_env = params
    echo "which_env=${env.which_env}"
}


def downloadComponent( componentName, componentVersion = 'spring24') {
    
    INVENTORY_DIR = 'env-config/ansible/inventory'
    PLAYBOOK_DIR = 'ansible-source/pipelines/ansible/playbooks'

    sh """
    ansible-playbook -v -i ${INVENTORY_DIR}/common.yaml -i ${INVENTORY_DIR}/${env.which_env}  \
        --key-file "/home/jenkins/.ssh/id_rsa" \
        -e "target_hosts=${componentName}" \
        -e "component_version=${componentVersion}" \
       ${PLAYBOOK_DIR}/1-download-artifact.yaml
    """

}

def installComponent( componentName) {

    INVENTORY_DIR = 'env-config/ansible/inventory'
    PLAYBOOK_DIR = 'ansible-source/pipelines/ansible/playbooks'

    sh """
    ansible-playbook -v -i ${INVENTORY_DIR}/common.yaml -i ${INVENTORY_DIR}/${env.which_env}  \
        --key-file "/home/jenkins/.ssh/id_rsa" \
        -e "target_hosts=${componentName}" \
        ${PLAYBOOK_DIR}/3-install-component.yaml
    """

}

// def dbPatch( componentName) {
//     sh """
//     ansible "${componentName}" -i env-config/ansible/inventory/${env.which_env} --key-file "/home/jenkins/.ssh/id_rsa" -m command -a "echo 'dbPatch which_site={{ which_site }} group_name={{group_name}} test={{test}} '" 
//     """

// }

def stopComponent( componentName) {

    INVENTORY_DIR = 'env-config/ansible/inventory'
    PLAYBOOK_DIR = 'ansible-source/pipelines/ansible/playbooks'

    sh """
    ansible-playbook -v -i ${INVENTORY_DIR}/common.yaml -i ${INVENTORY_DIR}/${env.which_env}  \
        --key-file "/home/jenkins/.ssh/id_rsa" \
        -e "target_hosts=${componentName}" \
        ${PLAYBOOK_DIR}/2-stop-component.yaml
    """

}

def startComponent( componentName) {

    INVENTORY_DIR = 'env-config/ansible/inventory'
    PLAYBOOK_DIR = 'ansible-source/pipelines/ansible/playbooks'

    sh """
    ansible-playbook -v -i ${INVENTORY_DIR}/common.yaml -i ${INVENTORY_DIR}/${env.which_env}  \
        --key-file "/home/jenkins/.ssh/id_rsa" \
        -e "target_hosts=${componentName}" \
        ${PLAYBOOK_DIR}/4-start-component.yaml
    """
}

def healthCheckComponent( componentName) {
    sh """
    ansible "${componentName}" -i env-config/ansible/inventory/${env.which_env} --key-file "/home/jenkins/.ssh/id_rsa" -m command -a "echo 'healthCheckComponent which_site={{ which_site }} group_name={{group_name}} test={{test}} '" 
    """
}

pipeline {
    agent { label "ansible" }

    environment {
        ENV_CONFIG_GIT_SOURCE = 'https://github.com/thfai2000/sample-app-configuration.git'
        APP_GIT_SOURCE = 'https://github.com/thfai2000/sample-app.git'
        ANSIBLE_GIT_SOURCE = 'https://github.com/thfai2000/jenkins-pipelines.git'
    }

    stages {
        
        stage('Select Snapshot and Environment') {
            steps {
                selectEnv {
                }
            }
        }

        stage('Download Artifacts ') {
            parallel {
                stage('frontend') {
                    steps {
                        downloadComponent("frontend:&hv")
                        downloadComponent("frontend:&st")
                    }
                }
                stage('backend') {
                    steps {
                        downloadComponent("backend:&hv")
                        downloadComponent("backend:&st")
                    }
                }
            }
        }
        
        stage('Rolling Install Components') {
            parallel {
                stage ("frontend") {
                    stages {
                        stage('stop+install hv') {
                            steps {
                                stopComponent("frontend:&hv")
                                installComponent("frontend:&hv")
                                startComponent("frontend:&hv")
                                healthCheckComponent("frontend:&hv")
                            }
                        }
                        stage('stop+install st') {
                            steps {
                                stopComponent("frontend:&st")
                                installComponent("frontend:&st")
                                startComponent("frontend:&st")
                                healthCheckComponent("frontend:&st")
                            }
                        }
                    }
                }
                stage ("backend") {
                    stages {
                        stage('stop+install hv') {
                            steps {
                                stopComponent("backend:&hv")
                                installComponent("backend:&hv")
                                startComponent("backend:&hv")
                                healthCheckComponent("backend:&hv")
                            }
                        }
                        stage('stop+install st') {
                            steps {
                                stopComponent("backend:&st")
                                installComponent("backend:&st")
                                startComponent("backend:&st")
                                healthCheckComponent("backend:&st")
                            }
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            echo "completed."
        }
    }
}



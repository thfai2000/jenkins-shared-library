

def getSnapshotUrl(version) {
    def snapshotUrl = "https://raw.githubusercontent.com/$VERSION_SNAPSHOT_REPO_NAME/$GIT_BRANCH/$VERSION_SNAPSHOT_FOLDER_NAME/$version"
    return snapshotUrl
}

def checkoutEnvConfig() {
    checkout([$class: 'GitSCM',
                branches: [[name: env.BRANCH_NAME]],
                doGenerateSubmoduleConfigurations: false,
                extensions: [],
                submoduleCfg: [],
                userRemoteConfigs: [[url: ENV_CONFIG_GIT_SOURCE]]])
    script {
        env.envFolderNamesString = sh(script: "ls * | xargs -n 1 basename", returnStdout: true).trim()
    }
}

def selectSnapshotAndEnv(closure){
    echo "GIT_BRANCH: ${env.BRANCH_NAME}"
    echo "VERSION_SNAPSHOT_REPO_NAME: $VERSION_SNAPSHOT_REPO_NAME"
    dir('env-config') {
        checkoutEnvConfig()
    }
    def envFolderNames = env.envFolderNamesString.split("\n")
    echo "type: ${envFolderNames.getClass()}"
    echo "envFolderNames: ${envFolderNames}"
    
    def treeApiUrl = "https://api.github.com/repos/$VERSION_SNAPSHOT_REPO_NAME/contents/$VERSION_SNAPSHOT_FOLDER_NAME?ref=$GIT_BRANCH"

    def response = httpRequest(url: treeApiUrl, httpMode: 'GET')

    def files = []
    if (response.status == 200) {
        def json = readJSON(text: response.content)
        files = json.findAll { it.type == 'file' }.collect { it.name }
    }
    snapshotVersions = files

    def params = input(message: 'Provide the deployment information',
        ok: "Continue",
        parameters: [
            choice(name: 'which_env', choices: Arrays.asList(envFolderNames), description: 'Select the environment'),
            choice(name: 'selected_version_snapshot', choices: snapshotVersions, description: 'Select the snapshot version')
        ]
    )
    if(closure){
        closure()
    }

    env.which_env = params.which_env
    env.selected_version_snapshot = params.selected_version_snapshot
    response = httpRequest(url: getSnapshotUrl(env.selected_version_snapshot))

    if (response.status == 200) {
        env.snapshotContent = response.content
        
    } else {
        error "Failed to retrieve YAML file. HTTP status: ${response.status}"
    }
    echo "which_env=${env.which_env}"
    echo "selected_version_snapshot=${env.selected_version_snapshot}"
}




def downloadDeployScript( closure) {
    downloadComponent('deploy', closure)
}

def downloadComponent( componentName) {
    
    sh """
    ansible "${componentName}" -i env-config/ansible/inventory/${env.which_env}.yaml --key-file "/home/jenkins/.ssh/id_rsa" -m command -a "echo 'downloadComponent which_site={{ which_site }} group_name={{group_name}} test={{test}} '" 
    """
}

def installComponent( componentName) {
    sh """
    ansible "${componentName}" -i env-config/ansible/inventory/${env.which_env}.yaml --key-file "/home/jenkins/.ssh/id_rsa" -m command -a "echo 'installComponent  which_site={{ which_site }} group_name={{group_name}} test={{test}} '" 
    """
}

def dbPatch( componentName) {
    sh """
    ansible "${componentName}" -i env-config/ansible/inventory/${env.which_env}.yaml --key-file "/home/jenkins/.ssh/id_rsa" -m command -a "echo 'dbPatch which_site={{ which_site }} group_name={{group_name}} test={{test}} '" 
    """

}

def stopComponent( componentName) {
    sh """
    ansible "${componentName}" -i env-config/ansible/inventory/${env.which_env}.yaml --key-file "/home/jenkins/.ssh/id_rsa" -m command -a "echo 'stopComponent which_site={{ which_site }} group_name={{group_name}} test={{test}} '" 
    """
}

def startComponent( componentName) {
    sh """
    ansible "${componentName}" -i env-config/ansible/inventory/${env.which_env}.yaml --key-file "/home/jenkins/.ssh/id_rsa" -m command -a "echo 'startComponent which_site={{ which_site }} group_name={{group_name}} test={{test}} '" 
    """
}

def healthCheckComponent( componentName) {
    sh """
    ansible "${componentName}" -i env-config/ansible/inventory/${env.which_env}.yaml --key-file "/home/jenkins/.ssh/id_rsa" -m command -a "echo 'healthCheckComponent which_site={{ which_site }} group_name={{group_name}} test={{test}} '" 
    """
}

pipeline {
    agent { label "ansible" }

    environment { 
        VERSION_SNAPSHOT_REPO_NAME = "thfai2000/version_snapshots"
        VERSION_SNAPSHOT_FOLDER_NAME = "sample-app"
        ENV_CONFIG_GIT_SOURCE = 'https://github.com/thfai2000/sample-app-configuration.git'
    }

    stages {

        stage('Select Snapshot and Environment') {
            steps {
                selectSnapshotAndEnv {
                }
            }
        }

        stage('Download Artifacts ') {
            parallel {
                stage('app') {
                    steps {
                        downloadComponent("app:&hv")
                        downloadComponent("app:&st")
                    }
                }
                stage('web') {
                    steps {
                        downloadComponent("web:&hv")
                        downloadComponent("web:&st")
                    }
                }
            }
        }
        
        stage('Stop & Install Components') {
            parallel {
                stage ("app") {
                    stages {
                        stage('stop') {
                            steps {
                                stopComponent("app")
                            }
                        }
                        stage('install') {
                            steps {
                                installComponent("app")
                            }
                        }
                    }
                }
                stage ("web") {
                    stages {
                        stage('stop') {
                            steps {
                                stopComponent("web")
                            }
                        }
                        stage('install') {
                            steps {
                                installComponent("web")
                            }
                        }
                    }
                }
            }
        }

        stage('Start Components') {
            parallel {
                stage('app') {
                    steps {
                        startComponent("app")
                    }
                }
                stage('web') {
                    steps {
                        startComponent("web")
                    }
                }
            }
        }

        stage('Health Check Components') {
            parallel {
                stage('app') {
                    steps {
                        healthCheckComponent("app") {
                        }
                    }
                }
                stage('web') {
                    steps {
                        healthCheckComponent("web") {
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            echo "completed."
        }
    }
}


